// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package handlers

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ConsentCategoryPurpose.
const (
	Destination     ConsentCategoryPurpose = "destination"
	Personalization ConsentCategoryPurpose = "personalization"
	Profiling       ConsentCategoryPurpose = "profiling"
)

// Defines values for ProfileEnrichmentRuleComputationMethod.
const (
	Count   ProfileEnrichmentRuleComputationMethod = "count"
	Extract ProfileEnrichmentRuleComputationMethod = "extract"
	Static  ProfileEnrichmentRuleComputationMethod = "static"
)

// Defines values for ProfileEnrichmentRuleMergeStrategy.
const (
	Combine   ProfileEnrichmentRuleMergeStrategy = "combine"
	Ignore    ProfileEnrichmentRuleMergeStrategy = "ignore"
	Overwrite ProfileEnrichmentRuleMergeStrategy = "overwrite"
)

// ApplicationData defines model for ApplicationData.
type ApplicationData struct {
	ApplicationId *string   `json:"application_id,omitempty"`
	Devices       *[]Device `json:"devices,omitempty"`
}

// Consent defines model for Consent.
type Consent struct {
	ApplicationId      string  `json:"application_id"`
	CategoryIdentifier *string `json:"category_identifier,omitempty"`

	// ConsentChannel Source of consent
	ConsentChannel string              `json:"consent_channel"`
	ConsentId      *openapi_types.UUID `json:"consent_id,omitempty"`
	Granted        bool                `json:"granted"`
	ProfileId      string              `json:"profile_id"`
	SourceIp       *string             `json:"source_ip,omitempty"`
	Timestamp      int64               `json:"timestamp"`
	UserAgent      *string             `json:"user_agent,omitempty"`
}

// ConsentCategory defines model for ConsentCategory.
type ConsentCategory struct {
	CategoryIdentifier string                 `json:"category_identifier"`
	CategoryName       string                 `json:"category_name"`
	Destinations       *[]string              `json:"destinations,omitempty"`
	Id                 *openapi_types.UUID    `json:"id,omitempty"`
	Purpose            ConsentCategoryPurpose `json:"purpose"`
}

// ConsentCategoryPurpose defines model for ConsentCategory.Purpose.
type ConsentCategoryPurpose string

// Device defines model for Device.
type Device struct {
	Browser  string             `json:"browser"`
	DeviceId openapi_types.UUID `json:"device_id"`

	// LastUsed Unix epoch timestamp
	LastUsed int64  `json:"last_used"`
	Os       string `json:"os"`
}

// Event defines model for Event.
type Event struct {
	ApplicationId  *string                 `json:"application_id,omitempty"`
	Context        *map[string]interface{} `json:"context,omitempty"`
	EventId        *string                 `json:"event_id,omitempty"`
	EventName      *string                 `json:"event_name,omitempty"`
	EventTimestamp *int                    `json:"event_timestamp,omitempty"`
	EventType      *string                 `json:"event_type,omitempty"`
	OrgId          *string                 `json:"org_id,omitempty"`
	ProfileId      *string                 `json:"profile_id,omitempty"`
	Properties     *map[string]interface{} `json:"properties,omitempty"`
}

// Profile defines model for Profile.
type Profile struct {
	ApplicationData    *[]ApplicationData      `json:"applicationData,omitempty"`
	IdentityAttributes *interface{}            `json:"identityAttributes,omitempty"`
	OriginCountry      *string                 `json:"origin_country,omitempty"`
	ProfileHierarchy   *ProfileHierarchy       `json:"profile_hierarchy,omitempty"`
	ProfileId          *string                 `json:"profile_id,omitempty"`
	Traits             *map[string]interface{} `json:"traits,omitempty"`
}

// ProfileEnrichmentRule defines model for ProfileEnrichmentRule.
type ProfileEnrichmentRule struct {
	ComputationMethod *ProfileEnrichmentRuleComputationMethod `json:"computation_method,omitempty"`
	CreatedAt         *int                                    `json:"created_at,omitempty"`
	Description       *string                                 `json:"description,omitempty"`
	MergeStrategy     *ProfileEnrichmentRuleMergeStrategy     `json:"merge_strategy,omitempty"`
	PropertyName      *string                                 `json:"property_name,omitempty"`
	RuleId            *string                                 `json:"rule_id,omitempty"`
	SourceField       *string                                 `json:"source_field,omitempty"`
	TimeRange         *string                                 `json:"time_range,omitempty"`
	Trigger           *RuleTrigger                            `json:"trigger,omitempty"`
	UpdatedAt         *int                                    `json:"updated_at,omitempty"`
	Value             *map[string]interface{}                 `json:"value,omitempty"`
	ValueType         *string                                 `json:"value_type,omitempty"`
}

// ProfileEnrichmentRuleComputationMethod defines model for ProfileEnrichmentRule.ComputationMethod.
type ProfileEnrichmentRuleComputationMethod string

// ProfileEnrichmentRuleMergeStrategy defines model for ProfileEnrichmentRule.MergeStrategy.
type ProfileEnrichmentRuleMergeStrategy string

// ProfileHierarchy defines model for ProfileHierarchy.
type ProfileHierarchy struct {
	IsPermanent         *bool               `json:"is_permanent,omitempty"`
	ListProfile         *bool               `json:"list_profile,omitempty"`
	PermanentProfileId  *string             `json:"permanent_profile_id,omitempty"`
	TemporaryProfileIds *[]TemporaryProfile `json:"temporary_profile_ids,omitempty"`
}

// RuleCondition defines model for RuleCondition.
type RuleCondition struct {
	Field    *string `json:"field,omitempty"`
	Operator *string `json:"operator,omitempty"`
	Value    *string `json:"value,omitempty"`
}

// RuleTrigger defines model for RuleTrigger.
type RuleTrigger struct {
	Conditions *[]RuleCondition `json:"conditions,omitempty"`
	EventName  *string          `json:"event_name,omitempty"`
	EventType  *string          `json:"event_type,omitempty"`
}

// TemporaryProfile defines model for TemporaryProfile.
type TemporaryProfile struct {
	RuleName           *string `json:"rule_name,omitempty"`
	TemporaryProfileId *string `json:"temporary_profile_id,omitempty"`
}

// UnificationRule defines model for UnificationRule.
type UnificationRule struct {
	// Attribute Attribute path to be used for unification
	Attribute string `json:"attribute"`

	// CreatedAt UNIX timestamp of creation
	CreatedAt *int64 `json:"created_at,omitempty"`

	// IsActive Whether the rule is currently active
	IsActive bool `json:"is_active"`

	// Priority Priority of the rule (lower number = higher priority)
	Priority int `json:"priority"`

	// RuleId Unique identifier for the resolution rule
	RuleId *openapi_types.UUID `json:"rule_id,omitempty"`

	// RuleName Descriptive name for the rule
	RuleName string `json:"rule_name"`

	// UpdatedAt UNIX timestamp of last update
	UpdatedAt *int64 `json:"updated_at,omitempty"`
}

// UnificationRulePatch defines model for UnificationRulePatch.
type UnificationRulePatch struct {
	// IsActive Whether the rule is currently active
	IsActive *bool `json:"is_active,omitempty"`

	// Priority Priority of the rule (lower number = higher priority)
	Priority *int `json:"priority,omitempty"`

	// RuleName Descriptive name for the rule
	RuleName *string `json:"rule_name,omitempty"`
}

// RevokeAllConsentsParams defines parameters for RevokeAllConsents.
type RevokeAllConsentsParams struct {
	ConsentType *string `form:"consent_type,omitempty" json:"consent_type,omitempty"`
	Category    *string `form:"category,omitempty" json:"category,omitempty"`
}

// GiveConsentJSONRequestBody defines body for GiveConsent for application/json ContentType.
type GiveConsentJSONRequestBody = Consent

// CreateEnrichmentRuleJSONRequestBody defines body for CreateEnrichmentRule for application/json ContentType.
type CreateEnrichmentRuleJSONRequestBody = ProfileEnrichmentRule

// PutEnrichmentRuleJSONRequestBody defines body for PutEnrichmentRule for application/json ContentType.
type PutEnrichmentRuleJSONRequestBody = ProfileEnrichmentRule

// AddEventJSONRequestBody defines body for AddEvent for application/json ContentType.
type AddEventJSONRequestBody = Event

// AddUnificationRuleJSONRequestBody defines body for AddUnificationRule for application/json ContentType.
type AddUnificationRuleJSONRequestBody = UnificationRule

// PatchUnificationRuleJSONRequestBody defines body for PatchUnificationRule for application/json ContentType.
type PatchUnificationRuleJSONRequestBody = UnificationRulePatch

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all consent categories
	// (GET /consent-categories)
	GetAllConsentCategories(c *gin.Context)
	// Add consent category
	// (POST /consent-categories)
	AddConsentCategory(c *gin.Context)
	// Get consent category
	// (GET /consent-categories/{id})
	GetConsentCategory(c *gin.Context, id string)
	// Update consent category
	// (PUT /consent-categories/{id})
	UpdateConsentCategory(c *gin.Context, id string)
	// Give or update consent
	// (POST /consents)
	GiveConsent(c *gin.Context)
	// Revoke all consents for a user
	// (DELETE /consents/{profile_id})
	RevokeAllConsents(c *gin.Context, profileId string, params RevokeAllConsentsParams)
	// Get all consents for a user
	// (GET /consents/{profile_id})
	GetUserConsents(c *gin.Context, profileId string)
	// Get all profile enrichment rules
	// (GET /enrichment-rules)
	GetEnrichmentRules(c *gin.Context)
	// Create profile enrichment rule
	// (POST /enrichment-rules)
	CreateEnrichmentRule(c *gin.Context)
	// Delete profile enrichment rule
	// (DELETE /enrichment-rules/{rule_id})
	DeleteEnrichmentRule(c *gin.Context, ruleId string)
	// Get profile enrichment rule by ID
	// (GET /enrichment-rules/{rule_id})
	GetEnrichmentRule(c *gin.Context, ruleId string)
	// Replace profile enrichment rule
	// (PUT /enrichment-rules/{rule_id})
	PutEnrichmentRule(c *gin.Context, ruleId string)
	// Get events
	// (GET /events)
	GetEvents(c *gin.Context)
	// Add a single event
	// (POST /events)
	AddEvent(c *gin.Context)
	// Get write key
	// (GET /events/write-key/{application_id})
	GetWriteKey(c *gin.Context, applicationId string)
	// Get a specific event
	// (GET /events/{event_id})
	GetEvent(c *gin.Context, eventId string)
	// Get all profiles
	// (GET /profiles)
	GetAllProfiles(c *gin.Context)
	// Delete profile by Id
	// (DELETE /profiles/{profile_id})
	DeleteProfile(c *gin.Context, profileId string)
	// Retrieve profile by Id
	// (GET /profiles/{profile_id})
	GetProfile(c *gin.Context, profileId string)
	// Get all unification rules
	// (GET /unification-rules)
	GetUnificationRules(c *gin.Context)
	// Add new unification rule
	// (POST /unification-rules)
	AddUnificationRule(c *gin.Context)
	// Delete unification rule
	// (DELETE /unification-rules/{rule_id})
	DeleteUnificationRule(c *gin.Context, ruleId string)
	// Get unification rule rule by ID
	// (GET /unification-rules/{rule_id})
	GetUnificationRule(c *gin.Context, ruleId string)
	// Patch unification rule
	// (PATCH /unification-rules/{rule_id})
	PatchUnificationRule(c *gin.Context, ruleId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAllConsentCategories operation middleware
func (siw *ServerInterfaceWrapper) GetAllConsentCategories(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllConsentCategories(c)
}

// AddConsentCategory operation middleware
func (siw *ServerInterfaceWrapper) AddConsentCategory(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddConsentCategory(c)
}

// GetConsentCategory operation middleware
func (siw *ServerInterfaceWrapper) GetConsentCategory(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetConsentCategory(c, id)
}

// UpdateConsentCategory operation middleware
func (siw *ServerInterfaceWrapper) UpdateConsentCategory(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateConsentCategory(c, id)
}

// GiveConsent operation middleware
func (siw *ServerInterfaceWrapper) GiveConsent(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GiveConsent(c)
}

// RevokeAllConsents operation middleware
func (siw *ServerInterfaceWrapper) RevokeAllConsents(c *gin.Context) {

	var err error

	// ------------- Path parameter "profile_id" -------------
	var profileId string

	err = runtime.BindStyledParameterWithOptions("simple", "profile_id", c.Param("profile_id"), &profileId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter profile_id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params RevokeAllConsentsParams

	// ------------- Optional query parameter "consent_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "consent_type", c.Request.URL.Query(), &params.ConsentType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter consent_type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "category" -------------

	err = runtime.BindQueryParameter("form", true, false, "category", c.Request.URL.Query(), &params.Category)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RevokeAllConsents(c, profileId, params)
}

// GetUserConsents operation middleware
func (siw *ServerInterfaceWrapper) GetUserConsents(c *gin.Context) {

	var err error

	// ------------- Path parameter "profile_id" -------------
	var profileId string

	err = runtime.BindStyledParameterWithOptions("simple", "profile_id", c.Param("profile_id"), &profileId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter profile_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserConsents(c, profileId)
}

// GetEnrichmentRules operation middleware
func (siw *ServerInterfaceWrapper) GetEnrichmentRules(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEnrichmentRules(c)
}

// CreateEnrichmentRule operation middleware
func (siw *ServerInterfaceWrapper) CreateEnrichmentRule(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateEnrichmentRule(c)
}

// DeleteEnrichmentRule operation middleware
func (siw *ServerInterfaceWrapper) DeleteEnrichmentRule(c *gin.Context) {

	var err error

	// ------------- Path parameter "rule_id" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithOptions("simple", "rule_id", c.Param("rule_id"), &ruleId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter rule_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteEnrichmentRule(c, ruleId)
}

// GetEnrichmentRule operation middleware
func (siw *ServerInterfaceWrapper) GetEnrichmentRule(c *gin.Context) {

	var err error

	// ------------- Path parameter "rule_id" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithOptions("simple", "rule_id", c.Param("rule_id"), &ruleId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter rule_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEnrichmentRule(c, ruleId)
}

// PutEnrichmentRule operation middleware
func (siw *ServerInterfaceWrapper) PutEnrichmentRule(c *gin.Context) {

	var err error

	// ------------- Path parameter "rule_id" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithOptions("simple", "rule_id", c.Param("rule_id"), &ruleId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter rule_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutEnrichmentRule(c, ruleId)
}

// GetEvents operation middleware
func (siw *ServerInterfaceWrapper) GetEvents(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEvents(c)
}

// AddEvent operation middleware
func (siw *ServerInterfaceWrapper) AddEvent(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddEvent(c)
}

// GetWriteKey operation middleware
func (siw *ServerInterfaceWrapper) GetWriteKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "application_id" -------------
	var applicationId string

	err = runtime.BindStyledParameterWithOptions("simple", "application_id", c.Param("application_id"), &applicationId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter application_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetWriteKey(c, applicationId)
}

// GetEvent operation middleware
func (siw *ServerInterfaceWrapper) GetEvent(c *gin.Context) {

	var err error

	// ------------- Path parameter "event_id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithOptions("simple", "event_id", c.Param("event_id"), &eventId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter event_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEvent(c, eventId)
}

// GetAllProfiles operation middleware
func (siw *ServerInterfaceWrapper) GetAllProfiles(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllProfiles(c)
}

// DeleteProfile operation middleware
func (siw *ServerInterfaceWrapper) DeleteProfile(c *gin.Context) {

	var err error

	// ------------- Path parameter "profile_id" -------------
	var profileId string

	err = runtime.BindStyledParameterWithOptions("simple", "profile_id", c.Param("profile_id"), &profileId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter profile_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteProfile(c, profileId)
}

// GetProfile operation middleware
func (siw *ServerInterfaceWrapper) GetProfile(c *gin.Context) {

	var err error

	// ------------- Path parameter "profile_id" -------------
	var profileId string

	err = runtime.BindStyledParameterWithOptions("simple", "profile_id", c.Param("profile_id"), &profileId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter profile_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProfile(c, profileId)
}

// GetUnificationRules operation middleware
func (siw *ServerInterfaceWrapper) GetUnificationRules(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUnificationRules(c)
}

// AddUnificationRule operation middleware
func (siw *ServerInterfaceWrapper) AddUnificationRule(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddUnificationRule(c)
}

// DeleteUnificationRule operation middleware
func (siw *ServerInterfaceWrapper) DeleteUnificationRule(c *gin.Context) {

	var err error

	// ------------- Path parameter "rule_id" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithOptions("simple", "rule_id", c.Param("rule_id"), &ruleId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter rule_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUnificationRule(c, ruleId)
}

// GetUnificationRule operation middleware
func (siw *ServerInterfaceWrapper) GetUnificationRule(c *gin.Context) {

	var err error

	// ------------- Path parameter "rule_id" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithOptions("simple", "rule_id", c.Param("rule_id"), &ruleId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter rule_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUnificationRule(c, ruleId)
}

// PatchUnificationRule operation middleware
func (siw *ServerInterfaceWrapper) PatchUnificationRule(c *gin.Context) {

	var err error

	// ------------- Path parameter "rule_id" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithOptions("simple", "rule_id", c.Param("rule_id"), &ruleId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter rule_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchUnificationRule(c, ruleId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/consent-categories", wrapper.GetAllConsentCategories)
	router.POST(options.BaseURL+"/consent-categories", wrapper.AddConsentCategory)
	router.GET(options.BaseURL+"/consent-categories/:id", wrapper.GetConsentCategory)
	router.PUT(options.BaseURL+"/consent-categories/:id", wrapper.UpdateConsentCategory)
	router.POST(options.BaseURL+"/consents", wrapper.GiveConsent)
	router.DELETE(options.BaseURL+"/consents/:profile_id", wrapper.RevokeAllConsents)
	router.GET(options.BaseURL+"/consents/:profile_id", wrapper.GetUserConsents)
	router.GET(options.BaseURL+"/enrichment-rules", wrapper.GetEnrichmentRules)
	router.POST(options.BaseURL+"/enrichment-rules", wrapper.CreateEnrichmentRule)
	router.DELETE(options.BaseURL+"/enrichment-rules/:rule_id", wrapper.DeleteEnrichmentRule)
	router.GET(options.BaseURL+"/enrichment-rules/:rule_id", wrapper.GetEnrichmentRule)
	router.PUT(options.BaseURL+"/enrichment-rules/:rule_id", wrapper.PutEnrichmentRule)
	router.GET(options.BaseURL+"/events", wrapper.GetEvents)
	router.POST(options.BaseURL+"/events", wrapper.AddEvent)
	router.GET(options.BaseURL+"/events/write-key/:application_id", wrapper.GetWriteKey)
	router.GET(options.BaseURL+"/events/:event_id", wrapper.GetEvent)
	router.GET(options.BaseURL+"/profiles", wrapper.GetAllProfiles)
	router.DELETE(options.BaseURL+"/profiles/:profile_id", wrapper.DeleteProfile)
	router.GET(options.BaseURL+"/profiles/:profile_id", wrapper.GetProfile)
	router.GET(options.BaseURL+"/unification-rules", wrapper.GetUnificationRules)
	router.POST(options.BaseURL+"/unification-rules", wrapper.AddUnificationRule)
	router.DELETE(options.BaseURL+"/unification-rules/:rule_id", wrapper.DeleteUnificationRule)
	router.GET(options.BaseURL+"/unification-rules/:rule_id", wrapper.GetUnificationRule)
	router.PATCH(options.BaseURL+"/unification-rules/:rule_id", wrapper.PatchUnificationRule)
}
